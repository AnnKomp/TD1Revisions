@page "/products"
@using BlazorTD1Revisions.Models
@inject HttpClient Http
@inject IConfiguration Config
@inject NavigationManager Navigation

<PageTitle>Produits</PageTitle>

<h1>Produits</h1>

<p>Cette page montre le fetch data depuis le server.</p>

@if (produits == null || marques == null || typesProduits == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Description</th>
                <th>Marque</th>
                <th>Type de Produit</th>
                <th>Actions</th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var produit in produits)
            {
                <tr>
                    <td>@produit.NomProduit</td>
                    <td>@produit.Description</td>
                    <td>@GetNomMarque(produit.IdMarque)</td>
                    <td>@GetNomTypeProduit(produit.IdTypeProduit)</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ModifierProduit(produit.IdProduit)">Modifier</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Produit[]? produits;
    private Marque[]? marques;
    private TypeProduit[]? typesProduits;
    private string? serviceEndpoint;

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{Config.GetValue<string>("BackendUrl")}/api";
        await GetProduits();
    }

    private async Task GetProduits()
    {
        var requestUri = $"{serviceEndpoint}/Produits";
        produits = await Http.GetFromJsonAsync<Produit[]>(requestUri);

        marques = await Http.GetFromJsonAsync<Marque[]>($"{serviceEndpoint}/Marques");
        typesProduits = await Http.GetFromJsonAsync<TypeProduit[]>($"{serviceEndpoint}/TypeProduits");
    }

    private string GetNomMarque(int idMarque)
    {
        var marque = marques?.FirstOrDefault(m => m.IdMarque == idMarque);
        return marque?.NomMarque ?? "Inconnu";
    }

    private string GetNomTypeProduit(int idTypeProduit)
    {
        var typeProduit = typesProduits?.FirstOrDefault(tp => tp.IdTypeProduit == idTypeProduit);
        return typeProduit?.NomTypeProduit ?? "Inconnu";
    }

    // Redirige l'utilisateur vers la page de modification du produit sélectionné
    private void ModifierProduit(int idProduit)
    {
        Navigation.NavigateTo($"/modif/{idProduit}");
    }
}
