@page "/modif/{id:int}"
@using BlazorTD1Revisions.Models
@inject HttpClient Http
@inject IConfiguration Config
@inject NavigationManager Navigation

<PageTitle>Modifier Produit</PageTitle>

<h3>Modifier le produit</h3>

@if (produit == null)
{
    <p><em>Chargement en cours...</em></p>
}
else
{
    <EditForm Model="produit" OnValidSubmit="ModifierProduit">
        <div class="mb-3">
            <label for="nomProduit">Nom du produit</label>
            <InputText id="nomProduit" class="form-control" @bind-Value="produit.NomProduit" />
        </div>
        <div class="mb-3">
            <label for="description">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="produit.Description" />
        </div>
        <div class="mb-3">
            <label for="stockReel">Stock Réel</label>
            <InputNumber id="stockReel" class="form-control" @bind-Value="produit.StockReel" />
        </div>
        <div class="mb-3">
            <label for="stockMin">Stock Minimum</label>
            <InputNumber id="stockMin" class="form-control" @bind-Value="produit.StockMin" />
        </div>
        <div class="mb-3">
            <label for="stockMax">Stock Maximum</label>
            <InputNumber id="stockMax" class="form-control" @bind-Value="produit.StockMax" />
        </div>
        <div class="mb-3">
            <label for="marque">Marque</label>
            <InputSelect id="marque" class="form-control" @bind-Value="produit.IdMarque">
                <option value="">-- Sélectionner une marque --</option>
                @foreach (var marque in marques)
                {
                    <option value="@marque.IdMarque">@marque.NomMarque</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label for="typeProduit">Type de produit</label>
            <InputSelect id="typeProduit" class="form-control" @bind-Value="produit.IdTypeProduit">
                <option value="">-- Sélectionner un type de produit --</option>
                @foreach (var typeProduit in typesProduits)
                {
                    <option value="@typeProduit.IdTypeProduit">@typeProduit.NomTypeProduit</option>
                }
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-primary">Modifier</button>
    </EditForm>
}

@code {
    private Produit? produit;
    private Marque[]? marques;
    private TypeProduit[]? typesProduits;
    private string? serviceEndpoint;
    [Parameter] public int id { get; set; }  // Paramètre passé via l'URL

    protected override async Task OnInitializedAsync()
    {
        serviceEndpoint = $"{Config.GetValue<string>("BackendUrl")}/api";
        await ChargerProduit();
        await ChargerMarquesEtTypes();
    }

    private async Task ChargerProduit()
    {
        // Charger le produit à modifier par ID
        produit = await Http.GetFromJsonAsync<Produit>($"{serviceEndpoint}/Produits/GetById/{id}");
    }

    private async Task ChargerMarquesEtTypes()
    {
        // Charger les marques et types de produits pour le formulaire
        marques = await Http.GetFromJsonAsync<Marque[]>($"{serviceEndpoint}/Marques");
        typesProduits = await Http.GetFromJsonAsync<TypeProduit[]>($"{serviceEndpoint}/TypeProduits");
    }

    private async Task ModifierProduit()
    {
        // Envoyer les données modifiées via une requête PUT
        var response = await Http.PutAsJsonAsync($"{serviceEndpoint}/Produits/{produit.IdProduit}", produit);

        if (response.IsSuccessStatusCode)
        {
            // Retour à la page produits après succès
            Navigation.NavigateTo("/products");
        }
        else
        {
            // Gérer l'erreur en cas d'échec
            Console.WriteLine("Erreur lors de la modification du produit");
        }
    }
}
